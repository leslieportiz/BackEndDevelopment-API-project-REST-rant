{"version":3,"sources":["places.tsx"],"names":[],"mappings":"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","file":"places.js","sourcesContent":["const router = require('express').Router()\r\nimport db from '../models'\r\nimport { Response } from 'express';\r\n\r\n// Inside your route handler or middleware\r\napp.get('/error', (_req: any, res: Response) => {\r\n  res.render('error404');\r\n});\r\n\r\n\r\nrouter.get('/', (req: any, res: { render: (arg0: string, arg1: { places: any } | undefined) => void }) => {\r\n    db.Place.find()\r\n    .then((places: any) => {\r\n      res.render('places/index', { places })\r\n    })\r\n    .catch(() => {\r\n      // res.render('error404')\r\n    })\r\n})\r\n\r\nrouter.post('/', (req: { body: { pic: undefined; cuisines: undefined; city: undefined; state: undefined } }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n  if (!req.body.pic){\r\n    req.body.pic = undefined\r\n  }\r\n  if (!req.body.cuisines){\r\n    req.body.cuisines = undefined\r\n  }\r\n  if (!req.body.city){\r\n    req.body.city = undefined\r\n  }\r\n  if (!req.body.state){\r\n    req.body.state = undefined\r\n  }\r\n    db.Place.create(req.body)\r\n    .then(() => {\r\n        res.redirect('/places')\r\n    })\r\n    .catch(()=>{\r\n      res.render('error404')\r\n    })\r\n})\r\n\r\n  \r\nrouter.get('/new', (req: any, res: { render: (arg0: string) => void }) => {\r\n  res.render('places/new')\r\n})\r\n\r\nrouter.get('/:id', (req: { params: { id: any } }, res: { render: (arg0: string, arg1: { place: any } | undefined) => void }) => {\r\n  db.Place.findById(req.params.id)\r\n  .populate('comments')\r\n  .then((place: any) => {\r\n      res.render('places/show', { place })\r\n  })\r\n  .catch(() => {\r\n      // res.render('error404')\r\n  })\r\n})\r\n\r\nrouter.put('/:id', (req: { body: { pic: undefined; cuisines: undefined; city: undefined; state: undefined }; params: { id: any } }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n  if (!req.body.pic){\r\n    req.body.pic = undefined\r\n  }\r\n  if (!req.body.cuisines){\r\n    req.body.cuisines = undefined\r\n  }\r\n  if (!req.body.city){\r\n    req.body.city = undefined\r\n  }\r\n  if (!req.body.state){\r\n    req.body.state = undefined\r\n  }\r\n  db.Place.findByIdAndUpdate(req.params.id,req.body)\r\n  .then(()=>{\r\n    res.redirect(`${req.params.id}`)\r\n  })\r\n  .catch(() => {\r\n    res.render('error404')\r\n  })\r\n})\r\n\r\nrouter.delete('/:id', (req: { params: { id: any } }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n  db.Place.findByIdAndDelete(req.params.id)\r\n  .then(() => {\r\n    res.redirect('/places')\r\n  })\r\n  .catch(()=>{\r\n     res.render('error404')\r\n})\r\n})\r\n\r\nrouter.get('/:id/edit', (req: { params: { id: any } }, res: { render: (arg0: string, arg1: { place: any } | undefined) => void }) => {\r\n  db.Place.findById(req.params.id)\r\n    .then((place: any) => {\r\n      res.render('places/edit', { place })\r\n    })\r\n    .catch(() => {\r\n      // res.render('error404')\r\n    })\r\n\r\n  })\r\n\r\n  router.post('/:id/comment', (req: { params: { id: any }; body: any }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n    db.Place.findById(req.params.id)\r\n    .then((place: { comments: any[]; save: () => Promise<any> }) => {\r\n        db.Comment.create(req.body)\r\n        .then((comment: { id: any }) => {\r\n            place.comments.push(comment.id)\r\n            place.save()\r\n            .then(() => {\r\n                res.redirect(`/places/${req.params.id}`)\r\n            })\r\n        })\r\n        .catch(() => {\r\n            res.render('error404')\r\n        })\r\n    })\r\n    .catch(() => {\r\n        res.render('error404')\r\n    })\r\n})\r\n\r\nrouter.delete('/:id/comment/:commentId', (req: { params: { commentId: any; id: any } }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n  db.Comment.findByIdAndDelete(req.params.commentId)\r\n  .then(() =>{\r\n    res.redirect(`/places/${req.params.id}`)\r\n  })\r\n  .catch(() => {\r\n    res.render('error404')\r\n  })\r\n  // db.Comment.findByIdAndDelete(req.params.commentId)\r\n  // .then(place => {\r\n  //   res.redirect(`/places/${req.params.id}`)\r\n  // })\r\n  // .catch(err=>{\r\n  //    res.render('error404')\r\n})\r\n\r\nrouter.post('/:id/rant', (req: any, res: { send: (arg0: string) => void }) => {\r\n  res.send('GET /places/:id/rant stub')\r\n})\r\n\r\nrouter.delete('/:id/rant/:rantId', (req: any, res: { send: (arg0: string) => void }) => {\r\n    res.send('GET /places/:id/rant/:rantId stub')\r\n})\r\n\r\nmodule.exports = router\r\n\r\n// const router = require('express').Router()\r\n// const places = require('../models/places.js')\r\n\r\n// router.get('/new', (req, res) => {\r\n//     res.render('places/new')\r\n// })\r\n\r\n// router.get('/:id', (req, res) => {\r\n//     let id = Number(req.params.id)\r\n//     if (isNaN(id)) {\r\n//         res.render('error404')\r\n//     }\r\n//     else if (!places[id]) {\r\n//         res.render('error404')\r\n//     }\r\n//     else {\r\n//         res.render('places/show', { place: places[id], id })\r\n//     }\r\n// })\r\n\r\n// router.delete('/:id', (req, res) => {\r\n//     let id = Number(req.params.id)\r\n//     if (isNaN(id)) {\r\n//         res.render('error404')\r\n//     }\r\n//     else if (!places[id]) {\r\n//         res.render('error404')\r\n//     }\r\n//     else {\r\n//         places.splice(id, 1)\r\n//         res.redirect('/places')\r\n//     }\r\n// })\r\n\r\n// router.put('/:id', (req, res) => {\r\n//     let id = Number(req.params.id)\r\n//     if (isNaN(id)) {\r\n//         res.render('error404')\r\n//     }\r\n//     else if (!places[id]) {\r\n//         res.render('error404')\r\n//     }\r\n//     else {\r\n//         // Dig into req.body and make sure data is valid\r\n//         if (!req.body.pic) {\r\n//             // Default image if one is not provided\r\n//             req.body.pic = 'http://placekitten.com/400/400'\r\n//         }\r\n//         if (!req.body.city) {\r\n//             req.body.city = 'North Las Vegas'\r\n//         }\r\n//         if (!req.body.state) {\r\n//             req.body.state = 'Nevada'\r\n//         }\r\n//         // Save the new data into places[id]\r\n//         places[id] = req.body\r\n//         res.redirect(`/places/${id}`)\r\n//     }\r\n//   })\r\n  \r\n\r\n  // router.get('/:id/edit', (req, res) => {\r\n  //     let id = Number(req.params.id)\r\n//     if (isNaN(id)) {\r\n//         res.render('error404')\r\n//     }\r\n//     else if (!places[id]) {\r\n//         res.render('error404')\r\n//     }\r\n//     else {\r\n//           res.render('places/edit', { place: places[id] })\r\n//     }\r\n\r\n// router.post('/', (req, res) => {\r\n//     // console.log(req.body)\r\n//     if (!req.body.pic) {\r\n//         // Default image if one is not provided\r\n//         req.body.pic = 'http://placekitten.com/400/400'\r\n//     }\r\n//     if (!req.body.city) {\r\n//         req.body.city = 'North Las Vegas'\r\n//     }\r\n//     if (!req.body.state) {\r\n//         req.body.state = 'Nevada'\r\n//     }\r\n//     places.push(req.body)\r\n//     res.redirect('/places')\r\n// })\r\n\r\n// router.get('/', (req, res) => {\r\n//     res.render('places/index', { places })\r\n// })\r\n// module.exports = router"]}