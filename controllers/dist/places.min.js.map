{"version":3,"sources":["places.tsx"],"names":["router","require","Router","models_1","app","get","_req","res","render","req","Place","find","then","places","post","body","pic","undefined","cuisines","city","state","create","redirect","findById","params","id","populate","place","put","findByIdAndUpdate","findByIdAndDelete","Comment","comment","comments","push","save","commentId","send","module","exports"],"mappings":"mCAAA,IAAMA,OAASC,QAAQ,WAAWC,SAClCC,SAAAF,QAAA,aAIAG,IAAIC,IAAI,SAAU,SAACC,EAAWC,GAC5BA,EAAIC,OAAO,cAIbR,OAAOK,IAAI,IAAK,SAACI,EAAUF,GACvBJ,SAAA,QAAGO,MAAMC,OACRC,KAAK,SAACC,GACLN,EAAIC,OAAO,eAAgB,CAAEK,OAAMA,MAE/B,MAAC,gBAKXb,OAAOc,KAAK,IAAK,SAACL,EAA2FF,GACtGE,EAAIM,KAAKC,MACZP,EAAIM,KAAKC,SAAMC,GAEZR,EAAIM,KAAKG,WACZT,EAAIM,KAAKG,cAAWD,GAEjBR,EAAIM,KAAKI,OACZV,EAAIM,KAAKI,UAAOF,GAEbR,EAAIM,KAAKK,QACZX,EAAIM,KAAKK,WAAQH,GAEjBd,SAAA,QAAGO,MAAMW,OAAOZ,EAAIM,MACnBH,KAAK,WACFL,EAAIe,SAAS,aAEX,MAAC,WACLf,EAAIC,OAAO,gBAKjBR,OAAOK,IAAI,OAAQ,SAACI,EAAUF,GAC5BA,EAAIC,OAAO,gBAGbR,OAAOK,IAAI,OAAQ,SAACI,EAA8BF,GAChDJ,SAAA,QAAGO,MAAMa,SAASd,EAAIe,OAAOC,IAC5BC,SAAS,YACTd,KAAK,SAACe,GACHpB,EAAIC,OAAO,cAAe,CAAEmB,MAAKA,MAE/B,MAAC,gBAKT3B,OAAO4B,IAAI,OAAQ,SAACnB,EAAgHF,GAC7HE,EAAIM,KAAKC,MACZP,EAAIM,KAAKC,SAAMC,GAEZR,EAAIM,KAAKG,WACZT,EAAIM,KAAKG,cAAWD,GAEjBR,EAAIM,KAAKI,OACZV,EAAIM,KAAKI,UAAOF,GAEbR,EAAIM,KAAKK,QACZX,EAAIM,KAAKK,WAAQH,GAEnBd,SAAA,QAAGO,MAAMmB,kBAAkBpB,EAAIe,OAAOC,GAAGhB,EAAIM,MAC5CH,KAAK,WACJL,EAAIe,SAAS,GAAGb,EAAIe,OAAOC,MAEvB,MAAC,WACLlB,EAAIC,OAAO,gBAIfR,OAAa,OAAC,OAAQ,SAACS,EAA8BF,GACnDJ,SAAA,QAAGO,MAAMoB,kBAAkBrB,EAAIe,OAAOC,IACrCb,KAAK,WACJL,EAAIe,SAAS,aAET,MAAC,WACJf,EAAIC,OAAO,gBAIhBR,OAAOK,IAAI,YAAa,SAACI,EAA8BF,GACrDJ,SAAA,QAAGO,MAAMa,SAASd,EAAIe,OAAOC,IAC1Bb,KAAK,SAACe,GACLpB,EAAIC,OAAO,cAAe,CAAEmB,MAAKA,MAE7B,MAAC,gBAMT3B,OAAOc,KAAK,eAAgB,SAACL,EAAyCF,GACpEJ,SAAA,QAAGO,MAAMa,SAASd,EAAIe,OAAOC,IAC5Bb,KAAK,SAACe,GACHxB,SAAA,QAAG4B,QAAQV,OAAOZ,EAAIM,MACrBH,KAAK,SAACoB,GACHL,EAAMM,SAASC,KAAKF,EAAQP,IAC5BE,EAAMQ,OACLvB,KAAK,WACFL,EAAIe,SAAS,WAAWb,EAAIe,OAAOC,QAGrC,MAAC,WACHlB,EAAIC,OAAO,gBAGb,MAAC,WACHD,EAAIC,OAAO,gBAInBR,OAAa,OAAC,0BAA2B,SAACS,EAA8CF,GACtFJ,SAAA,QAAG4B,QAAQD,kBAAkBrB,EAAIe,OAAOY,WACvCxB,KAAK,WACJL,EAAIe,SAAS,WAAWb,EAAIe,OAAOC,MAE/B,MAAC,WACLlB,EAAIC,OAAO,gBAUfR,OAAOc,KAAK,YAAa,SAACL,EAAUF,GAClCA,EAAI8B,KAAK,+BAGXrC,OAAa,OAAC,oBAAqB,SAACS,EAAUF,GAC1CA,EAAI8B,KAAK,uCAGbC,OAAOC,QAAUvC","file":"places.min.js","sourcesContent":["const router = require('express').Router()\r\nimport db from '../models'\r\nimport { Response } from 'express';\r\n\r\n// Inside your route handler or middleware\r\napp.get('/error', (_req: any, res: Response) => {\r\n  res.render('error404');\r\n});\r\n\r\n\r\nrouter.get('/', (req: any, res: { render: (arg0: string, arg1: { places: any } | undefined) => void }) => {\r\n    db.Place.find()\r\n    .then((places: any) => {\r\n      res.render('places/index', { places })\r\n    })\r\n    .catch(() => {\r\n      // res.render('error404')\r\n    })\r\n})\r\n\r\nrouter.post('/', (req: { body: { pic: undefined; cuisines: undefined; city: undefined; state: undefined } }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n  if (!req.body.pic){\r\n    req.body.pic = undefined\r\n  }\r\n  if (!req.body.cuisines){\r\n    req.body.cuisines = undefined\r\n  }\r\n  if (!req.body.city){\r\n    req.body.city = undefined\r\n  }\r\n  if (!req.body.state){\r\n    req.body.state = undefined\r\n  }\r\n    db.Place.create(req.body)\r\n    .then(() => {\r\n        res.redirect('/places')\r\n    })\r\n    .catch(()=>{\r\n      res.render('error404')\r\n    })\r\n})\r\n\r\n  \r\nrouter.get('/new', (req: any, res: { render: (arg0: string) => void }) => {\r\n  res.render('places/new')\r\n})\r\n\r\nrouter.get('/:id', (req: { params: { id: any } }, res: { render: (arg0: string, arg1: { place: any } | undefined) => void }) => {\r\n  db.Place.findById(req.params.id)\r\n  .populate('comments')\r\n  .then((place: any) => {\r\n      res.render('places/show', { place })\r\n  })\r\n  .catch(() => {\r\n      // res.render('error404')\r\n  })\r\n})\r\n\r\nrouter.put('/:id', (req: { body: { pic: undefined; cuisines: undefined; city: undefined; state: undefined }; params: { id: any } }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n  if (!req.body.pic){\r\n    req.body.pic = undefined\r\n  }\r\n  if (!req.body.cuisines){\r\n    req.body.cuisines = undefined\r\n  }\r\n  if (!req.body.city){\r\n    req.body.city = undefined\r\n  }\r\n  if (!req.body.state){\r\n    req.body.state = undefined\r\n  }\r\n  db.Place.findByIdAndUpdate(req.params.id,req.body)\r\n  .then(()=>{\r\n    res.redirect(`${req.params.id}`)\r\n  })\r\n  .catch(() => {\r\n    res.render('error404')\r\n  })\r\n})\r\n\r\nrouter.delete('/:id', (req: { params: { id: any } }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n  db.Place.findByIdAndDelete(req.params.id)\r\n  .then(() => {\r\n    res.redirect('/places')\r\n  })\r\n  .catch(()=>{\r\n     res.render('error404')\r\n})\r\n})\r\n\r\nrouter.get('/:id/edit', (req: { params: { id: any } }, res: { render: (arg0: string, arg1: { place: any } | undefined) => void }) => {\r\n  db.Place.findById(req.params.id)\r\n    .then((place: any) => {\r\n      res.render('places/edit', { place })\r\n    })\r\n    .catch(() => {\r\n      // res.render('error404')\r\n    })\r\n\r\n  })\r\n\r\n  router.post('/:id/comment', (req: { params: { id: any }; body: any }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n    db.Place.findById(req.params.id)\r\n    .then((place: { comments: any[]; save: () => Promise<any> }) => {\r\n        db.Comment.create(req.body)\r\n        .then((comment: { id: any }) => {\r\n            place.comments.push(comment.id)\r\n            place.save()\r\n            .then(() => {\r\n                res.redirect(`/places/${req.params.id}`)\r\n            })\r\n        })\r\n        .catch(() => {\r\n            res.render('error404')\r\n        })\r\n    })\r\n    .catch(() => {\r\n        res.render('error404')\r\n    })\r\n})\r\n\r\nrouter.delete('/:id/comment/:commentId', (req: { params: { commentId: any; id: any } }, res: { redirect: (arg0: string) => void; render: (arg0: string) => void }) => {\r\n  db.Comment.findByIdAndDelete(req.params.commentId)\r\n  .then(() =>{\r\n    res.redirect(`/places/${req.params.id}`)\r\n  })\r\n  .catch(() => {\r\n    res.render('error404')\r\n  })\r\n  // db.Comment.findByIdAndDelete(req.params.commentId)\r\n  // .then(place => {\r\n  //   res.redirect(`/places/${req.params.id}`)\r\n  // })\r\n  // .catch(err=>{\r\n  //    res.render('error404')\r\n})\r\n\r\nrouter.post('/:id/rant', (req: any, res: { send: (arg0: string) => void }) => {\r\n  res.send('GET /places/:id/rant stub')\r\n})\r\n\r\nrouter.delete('/:id/rant/:rantId', (req: any, res: { send: (arg0: string) => void }) => {\r\n    res.send('GET /places/:id/rant/:rantId stub')\r\n})\r\n\r\nmodule.exports = router\r\n\r\n// const router = require('express').Router()\r\n// const places = require('../models/places.js')\r\n\r\n// router.get('/new', (req, res) => {\r\n//     res.render('places/new')\r\n// })\r\n\r\n// router.get('/:id', (req, res) => {\r\n//     let id = Number(req.params.id)\r\n//     if (isNaN(id)) {\r\n//         res.render('error404')\r\n//     }\r\n//     else if (!places[id]) {\r\n//         res.render('error404')\r\n//     }\r\n//     else {\r\n//         res.render('places/show', { place: places[id], id })\r\n//     }\r\n// })\r\n\r\n// router.delete('/:id', (req, res) => {\r\n//     let id = Number(req.params.id)\r\n//     if (isNaN(id)) {\r\n//         res.render('error404')\r\n//     }\r\n//     else if (!places[id]) {\r\n//         res.render('error404')\r\n//     }\r\n//     else {\r\n//         places.splice(id, 1)\r\n//         res.redirect('/places')\r\n//     }\r\n// })\r\n\r\n// router.put('/:id', (req, res) => {\r\n//     let id = Number(req.params.id)\r\n//     if (isNaN(id)) {\r\n//         res.render('error404')\r\n//     }\r\n//     else if (!places[id]) {\r\n//         res.render('error404')\r\n//     }\r\n//     else {\r\n//         // Dig into req.body and make sure data is valid\r\n//         if (!req.body.pic) {\r\n//             // Default image if one is not provided\r\n//             req.body.pic = 'http://placekitten.com/400/400'\r\n//         }\r\n//         if (!req.body.city) {\r\n//             req.body.city = 'North Las Vegas'\r\n//         }\r\n//         if (!req.body.state) {\r\n//             req.body.state = 'Nevada'\r\n//         }\r\n//         // Save the new data into places[id]\r\n//         places[id] = req.body\r\n//         res.redirect(`/places/${id}`)\r\n//     }\r\n//   })\r\n  \r\n\r\n  // router.get('/:id/edit', (req, res) => {\r\n  //     let id = Number(req.params.id)\r\n//     if (isNaN(id)) {\r\n//         res.render('error404')\r\n//     }\r\n//     else if (!places[id]) {\r\n//         res.render('error404')\r\n//     }\r\n//     else {\r\n//           res.render('places/edit', { place: places[id] })\r\n//     }\r\n\r\n// router.post('/', (req, res) => {\r\n//     // console.log(req.body)\r\n//     if (!req.body.pic) {\r\n//         // Default image if one is not provided\r\n//         req.body.pic = 'http://placekitten.com/400/400'\r\n//     }\r\n//     if (!req.body.city) {\r\n//         req.body.city = 'North Las Vegas'\r\n//     }\r\n//     if (!req.body.state) {\r\n//         req.body.state = 'Nevada'\r\n//     }\r\n//     places.push(req.body)\r\n//     res.redirect('/places')\r\n// })\r\n\r\n// router.get('/', (req, res) => {\r\n//     res.render('places/index', { places })\r\n// })\r\n// module.exports = router"]}